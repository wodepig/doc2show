import{_ as l,c as i,a as t,o as a}from"./app-D6s_7T7O.js";const n={};function u(r,e){return a(),i("div",null,e[0]||(e[0]=[t('<p>大家好，我是村长。欢迎大家开启 Nuxt 全栈开发学习之旅！</p><p>第一篇我们称为概念篇。为什么我们要先从概念讲起哪？主要原因是不少小伙伴前端开发的时间不久，大家普遍接触的是 SPA 应用开发，且仅限于前端部分，对一些传统开发模式、渲染模式及服务端知识知之甚少，所以如果我们直接开始项目开发，可能会让大家对一些操作感到疑惑，因此我们先了解概念，给大家做一些铺垫。</p><p>在概念篇中，我们主要给大家介绍以下方面内容：</p><ul><li>Nuxt 特性和架构；</li><li>四种渲染模式差异和选择。</li></ul><h2 id="vue-栈上层框架最佳选择" tabindex="-1"><a class="header-anchor" href="#vue-栈上层框架最佳选择"><span>Vue 栈上层框架最佳选择</span></a></h2><p>Nuxt 是一个基于 Vue 的上层全栈通用框架，它提供了大量优秀特性提升开发效率和体验，因此是 Vue 栈上层框架的最佳选择之一。</p><p>尤雨溪曾多次在各种前端大会中大力推荐 Nuxt，去年底 Nuxt3 稳定版正式发布，这是我们上手 Nuxt3 的最佳时刻，不管是 API，还是框架稳定性，亦或生态繁荣程度大家都不需要担心，我们会在后面教程中给大家演示诸多三方库的整合方法。</p><p>同时 Nuxt 也可以在全栈开发、SPA（单页应用）、SSR（服务端渲染）同构开发、SSG（静态站点生成）等场景发挥巨大作用，我们在后续的案例和项目中都会讨论和演示这些开发模式。</p><p>下面我们就带大家快速体验 Nuxt 提供的这些优秀特性。</p><h3 id="开箱即用的开发环境" tabindex="-1"><a class="header-anchor" href="#开箱即用的开发环境"><span>开箱即用的开发环境</span></a></h3><p>开发者对一款现代框架的一个重要要求就是开箱即用。在这方面 Nuxt 提供了如下能力：</p><ul><li>整合 Vue3 作为视图引擎；</li><li>整合 Webpack5 和 Vite 作为打包工具；</li><li>提供最新 ES 语法，零配置 TS 支持；</li><li>内置 vue-router，基于文件的路由；</li><li>内置 SSR 友好的全局状态管理模块；</li><li>内置数据访问模块 useFetch 等等。</li></ul><h3 id="良好的开发体验" tabindex="-1"><a class="header-anchor" href="#良好的开发体验"><span>良好的开发体验</span></a></h3><p>良好的开发体验主要来源于效率工具和避免重复劳动，这方面我们看一下 Nuxt 提供的能力：</p><ul><li>基于文件的路由支持；</li><li>组件、依赖库、工具集的自动导入；</li><li>内置的数据获取模块和新的编程范式；</li><li>零配置的 TS 支持；</li><li>插件、模块、中间件等多种复用机制。</li></ul><h3 id="服务端能力" tabindex="-1"><a class="header-anchor" href="#服务端能力"><span>服务端能力</span></a></h3><p>Nuxt 内置了 Nitro 服务端引擎，能够同时提供 SSR 和 API 路由支持，这也就是说，除了能够提供服务端渲染能力，我们还能编写服务端接口，这使我们拥有了全栈开发能力。另外 API 兼容 node、connect、express，未来也可以把应用发布到 Node.js、Serverless 等服务器运行环境。</p><h3 id="不同场景解决方案" tabindex="-1"><a class="header-anchor" href="#不同场景解决方案"><span>不同场景解决方案</span></a></h3><p>为了满足开发者多种场景开发需求，Nuxt 提供了 5 种渲染模式：</p><ul><li>服务端渲染 SSR；</li><li>客户端渲染 SPA；</li><li>全静态内容生成 SSG；</li><li>混合渲染模式 Hybrid；</li><li>边缘渲染 Edge-render。</li></ul><p>在后面章节中，我们也将给大家详细介绍这几种模式的异同和选择。</p><h3 id="扩展能力" tabindex="-1"><a class="header-anchor" href="#扩展能力"><span>扩展能力</span></a></h3><p>比起传统 Vue 项目，Nuxt 给予我们更多扩展能力和复用能力：</p><ul><li>中间件：针对单个路由的扩展；</li><li>插件：针对 NuxtApp 的扩展；</li><li>模块：扩展 Nuxt 核心能力以及简化整合能力；</li><li>层：针对 Nuxt 应用的组件、工具和配置复用能力。</li></ul><h2 id="nuxt-整体架构" tabindex="-1"><a class="header-anchor" href="#nuxt-整体架构"><span>Nuxt 整体架构</span></a></h2><p>Nuxt 框架由一些包组成，它们各有不同作用：</p><ul><li><p>核心引擎：nuxt，实现核心功能，串联所有模块；</p></li><li><p>打包：@nuxt/vite-builder、@nuxt/webpack-builder；</p></li><li><p>命令行工具：nuxi，创建、调试、打包项目等；</p></li><li><p>服务端引擎：nitro，服务端渲染，API 路由；</p></li><li><p>开发包：@nuxt/kit，用于 Nuxt 模块开发；</p></li><li><p>Nuxt 2 桥：@nuxt/bridge，用于 Nuxt2 项目中使用 Nuxt3 特性。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节全面了解 Nuxt 特性，以及它能给我们开发者带来什么。同时了解了 Nuxt 框架中各个组成包，实际开发中，由于有 nuxt 作为串联，除了 nuxi 之外，我们很少接触到其他包。但是如果我们要开发 Nuxt 模块，我们就需要用到 @nuxt/kit，或者我们想要在已有的 Nuxt2 项目中使用 Nuxt3 特性，我们就会需要用到 @nuxt/bridge。</p><h2 id="预告" tabindex="-1"><a class="header-anchor" href="#预告"><span>预告</span></a></h2><p>下一节，我们将全面了解 Nuxt 提供的 5 种渲染模式，这将为后续项目开发打好基础。</p>',31)]))}const p=l(n,[["render",u],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/nuxt3/j5vmm5bw/","title":"02-上层框架最佳选择：全面了解 Nuxt3 特性和架构","lang":"zh-CN","frontmatter":{"title":"02-上层框架最佳选择：全面了解 Nuxt3 特性和架构","author":"Your name","createTime":"2024/07/29 12:35:13","permalink":"/nuxt3/j5vmm5bw/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"Vue 栈上层框架最佳选择","slug":"vue-栈上层框架最佳选择","link":"#vue-栈上层框架最佳选择","children":[{"level":3,"title":"开箱即用的开发环境","slug":"开箱即用的开发环境","link":"#开箱即用的开发环境","children":[]},{"level":3,"title":"良好的开发体验","slug":"良好的开发体验","link":"#良好的开发体验","children":[]},{"level":3,"title":"服务端能力","slug":"服务端能力","link":"#服务端能力","children":[]},{"level":3,"title":"不同场景解决方案","slug":"不同场景解决方案","link":"#不同场景解决方案","children":[]},{"level":3,"title":"扩展能力","slug":"扩展能力","link":"#扩展能力","children":[]}]},{"level":2,"title":"Nuxt 整体架构","slug":"nuxt-整体架构","link":"#nuxt-整体架构","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"预告","slug":"预告","link":"#预告","children":[]}],"readingTime":{"minutes":4.02,"words":1205},"git":{"createdTime":1722235299000,"updatedTime":1728783252000,"contributors":[{"name":"DengChang","email":"85365","commits":1},{"name":"xxdl","email":"xxdl@xxdl.top","commits":1}]},"filePathRelative":"notes/nuxt3/02-上层框架最佳选择：全面了解 Nuxt3 特性和架构.md"}`);export{p as comp,d as data};
