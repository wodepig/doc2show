import{_ as s,c as n,a as i,o as a}from"./app-D6s_7T7O.js";const l="/doc2show/assets/8cfe8d501cbf40e381c262cc65205e10~tplv-k3u1fbpfcp-zoom-1-BdDRvpHx.png",t="/doc2show/assets/cdfe4851406749a39e205282a34ffb9a~tplv-k3u1fbpfcp-zoom-1-C3yMg1hj.png",c="/doc2show/assets/98ab3c0e295541bea66a05e6df4de720~tplv-k3u1fbpfcp-zoom-1-s9JLMLhC.png",d="/doc2show/assets/a70ce1806bc2452f9e745b887a8a0cc3~tplv-k3u1fbpfcp-zoom-1-DkPJ95hO.png",o="/doc2show/assets/4f23bb139faa44c6a33d1498fa4ad60c~tplv-k3u1fbpfcp-zoom-1-G19YYFDz.png",p="/doc2show/assets/92bebd337e1c432dbab83e241a0f11ac~tplv-k3u1fbpfcp-zoom-1-C9-r1UcK.png",r="/doc2show/assets/ea9308d6f3fb47a4ade43903e5e2fe11~tplv-k3u1fbpfcp-zoom-1-CS5Ueg7L.png",u="/doc2show/assets/1cdacd2bcb3a44c8a8d22b8167dd9a9c~tplv-k3u1fbpfcp-zoom-1-YaBgIINi.png",g="/doc2show/assets/defff9371a344771a10ceea8553bc456~tplv-k3u1fbpfcp-zoom-1-BYoCEzcM.png",h="/doc2show/assets/74adeea8b14d4d04b2fa82a9a0177bc2~tplv-k3u1fbpfcp-zoom-1-BjkKKXGb.png",v="/doc2show/assets/83dca7261a40473d8a019c44cd299b81~tplv-k3u1fbpfcp-zoom-1-CxjE5L1N.png",m="/doc2show/assets/f61ea9b9cf9841079c625e83259ec832~tplv-k3u1fbpfcp-zoom-1-CVfpjFyn.png",k="/doc2show/assets/f98e50396c5e40c09763647153621d81~tplv-k3u1fbpfcp-zoom-1-Bh7lxmGp.png",b="/doc2show/assets/2b78d48c7b2b4497ab715a8c88ed16d8~tplv-k3u1fbpfcp-zoom-1-mKvPRlMq.png",x="/doc2show/assets/1b18eb56efd24ba1ae6b79c23a7e67e5~tplv-k3u1fbpfcp-zoom-1-CdQaLVI2.png",f="/doc2show/assets/a065f38fbe42451b8f0268f66a2b7bf5~tplv-k3u1fbpfcp-zoom-1-jxISW_gr.png",y="/doc2show/assets/2aa871391f71495586181f29c4c68d79~tplv-k3u1fbpfcp-zoom-1-wqME3Wae.png",F="/doc2show/assets/dc8d902da91d4367bde4efea54a17e07~tplv-k3u1fbpfcp-zoom-1-BxQToS-J.png",w="/doc2show/assets/f001b9f8205e493f90bfc33fecd67df7~tplv-k3u1fbpfcp-zoom-1-Bz6IPD4d.png",_="/doc2show/assets/f03d59946b2944e2adc8383c1473f22f~tplv-k3u1fbpfcp-zoom-1-B3ttWK4H.png",q="/doc2show/assets/4df47c93a98640789e606810abb378a3~tplv-k3u1fbpfcp-zoom-1-DrqeCoPQ.png",A="/doc2show/assets/2b0d835bbc73467f80a39de4452c7b1d~tplv-k3u1fbpfcp-zoom-1-Bvlp0u2j.png",B="/doc2show/assets/00d7e6d4ff324fcbaa023c44ee9d39fe~tplv-k3u1fbpfcp-zoom-1-D4pGCYdk.png",C="/doc2show/assets/fba544344440443d92ec77844ce47f72~tplv-k3u1fbpfcp-zoom-1-BPX6YI3C.png",j="/doc2show/assets/5c60309aad2a4ae58d3e1f5f1762ebc4~tplv-k3u1fbpfcp-zoom-1-DGSjSH2n.png",z="/doc2show/assets/1bcaeb5950a6434b84bd7560d610afde~tplv-k3u1fbpfcp-zoom-1-CEgbwTe-.png",D="/doc2show/assets/07a8ac6c08b9414cb21fac43cbe208b2~tplv-k3u1fbpfcp-zoom-1-CQVkf6zx.png",S="/doc2show/assets/0b097664d9f44f878037c2ed37d81496~tplv-k3u1fbpfcp-zoom-1-DHWix5JV.png",E="/doc2show/assets/2e9126254302464baf5f16071375999d~tplv-k3u1fbpfcp-zoom-1-Dtyv4zPi.png",W="/doc2show/assets/405c8fb9fa174b398f7631e92ff42355~tplv-k3u1fbpfcp-zoom-1-DtR0eXNt.png",M="/doc2show/assets/9fe413a90a1340939eb3e447d82a25a9~tplv-k3u1fbpfcp-zoom-1-a-mESCR8.png",L="/doc2show/assets/9a00c97cf0134c53b57d966bdb505251~tplv-k3u1fbpfcp-zoom-1-B1Al2mO2.png",P="/doc2show/assets/71b198fcaf9e4b97bddaf16ce2005251~tplv-k3u1fbpfcp-zoom-1-Ck9wwjPK.png",Y="/doc2show/assets/c80b8f7c354a48a3ad6bd8d6921b7055~tplv-k3u1fbpfcp-zoom-1-qQhSzcP6.png",N="/doc2show/assets/bdeef468bbd44e61a16837d6db9d0f18~tplv-k3u1fbpfcp-zoom-1-C-oiwZrg.png",R="/doc2show/assets/8aff9df2259e419b893892bd24c9d164~tplv-k3u1fbpfcp-zoom-1-Q1pMq4-f.png",G={};function K(J,e){return a(),n("div",null,e[0]||(e[0]=[i('<p>Flexbox 布局中提供了多个用于对齐 Flex 项目以及 Flex 项目之间分配空间的属性。简单地说，这些属性能够在 Flex 容器的主轴和侧轴上对齐 Flex 项目，以及在 Flex 项目之间分配空间。</p><p>这些属性可以分为两组：<strong>空间分配属性</strong> 和 <strong>对齐属性</strong> 。用于分配 Flex 容器空间的属性主要有：</p><ul><li><code>justify-content</code>：沿 Flex 容器的主轴分配 Flex 容器的剩余空间；</li></ul><ul><li><code>align-content</code>：沿 Flex 容器的侧轴分配 Flex 容器的剩余空间；</li></ul><ul><li><code>place-content</code>：它是 <code>justify-content</code> 和 <code>align-content</code> 的简写属性。</li></ul><p>用于在 Flexbox 布局中对齐的属性如下：</p><ul><li><code>align-self</code>：沿 Flex 容器侧轴对齐单个 Flex 项目；</li></ul><ul><li><code>align-items</code>：将所有 Flex 项目作为一个组，沿 Flex 容器侧轴对齐。</li></ul><p><code>justify-</code> 开头的属性主要用于 Flex 容器的主轴方向；<code>align-</code> 开头的属性主要用于 Flex 容器侧轴方向；<code>-items</code> 结尾的属性主要用于对齐 Flex 项目，<code>-self</code> 结尾的属性主要用于 Flex 项目的自对齐，<code>-content</code> 结尾的属性主要用于容器空间分配。</p><p><img src="'+l+`" alt="img"></p><p>只不过在做出正确的选择之前，你需要知道：</p><ul><li>对齐方向（Flex 容器的主轴方向通常水平方向，否则也是内联轴方向；侧轴是垂直方向，否则也是块轴方向）；</li></ul><ul><li>你在布局要在对齐什么（所有 Flex 项目，单个 Flex 项目或者两者之间的内容）。</li></ul><table><thead><tr><th></th><th><strong>主轴(<code>justify-*</code>)</strong></th><th><strong>侧轴(<code>align-*</code>)</strong></th></tr></thead><tbody><tr><td><strong>对齐 Flex 项目</strong>( <code>*-items</code>)</td><td><s><code>justify-items</code></s></td><td><code>align-items</code></td></tr><tr><td><strong>Flex 项目自对齐</strong>( <code>*-self</code>)</td><td><s><code>justify-self</code></s></td><td><code>align-self</code></td></tr><tr><td>空间分配( <code>*-content</code>)</td><td><code>justify-content</code></td><td><code>align-content</code></td></tr></tbody></table><p>需要提醒一下的是，Flex 容器的主轴和侧轴的方向是可以改变的，用于 Flex 容器上的 <code>flex-direction</code> ，CSS 的书写模式 <code>writing-mode</code> 属性，CSS 阅读模式 <code>dirction</code> 和 HTML 元素的 <code>dir</code> 属性都可以改变。另外，<strong>在 Flexbox 布局中是没有</strong> <strong><code>justify-self</code>属性的</strong> ！</p><blockquote><p>这里提到的对齐相关的属性，最早是出于 Flexbox 布局模块的，但也可以用于 CSS Grid 布局中。因此，在后来 W3C 的 CSS 工作小组，将这些属性纳入到一个独立的功能模块中，即 <strong>CSS Box Alignment Module</strong> ，到目前为止该<a href="https://www.w3.org/TR/css-align-3" target="_blank" rel="noopener noreferrer">模块最新版本是 Level 3</a>。</p></blockquote><p>在这里，你可以了解，在 Flexbox 布局中它们如何工作。</p><p>为了让接下来的示例尽量避免复杂化，在这里我们对示例做一定的约束：</p><ul><li>Flex 容器是尺寸是 <code>600px x 300px</code> 的矩形；</li></ul><ul><li>所有 Flex 项目的尺寸是 <code>88px x 88px</code>；</li></ul><ul><li>Flex 项目之间未显式设置任何间距；</li></ul><ul><li>左侧（或上面）容器是一个单行布局，右侧（或下面）是一个多行布局；</li></ul><ul><li>CSS 书写模式和阅读模式都是 <code>ltr</code> （Left-To-Right）。</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;flex-container&quot;&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;item&quot;&gt; 1 &lt;/div&gt;</span></span>
<span class="line"><span>    &lt;!-- 中间省略 两个 Item --&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;item&quot;&gt; 4 &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>&lt;div class=&quot;flex-container&quot;&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;item&quot;&gt; 1 &lt;/div&gt;</span></span>
<span class="line"><span>    &lt;!-- 中间省略 7个 Item --&gt;</span></span>
<span class="line"><span>    &lt;div class=&quot;item&quot;&gt; 8 &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">flex-container</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    flex-wrap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> wrap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    inline-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 400</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    block-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 300</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">​</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    inline-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 120</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    block-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 120</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始效果（在没有使用任何对齐方式）：</p><p><img src="`+t+`" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/MWGezqJ" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/MWGezqJ</a></p></blockquote><p>请注意，Flex 项目彼此相邻。由于 Flexbox 是一个单维布局，因此 Flex 项目要么按行对齐，要么按列对齐（默认为行对齐）。并且 Flex 项目换行之后，也是在自己所在行的主轴方向上排列。</p><p>还有，默认情况下，Flex 项目<strong>在侧轴上会被拉伸伸展，</strong> 因为 Flex 容器 <code>align-items</code> 属性的默认值为 <code>stretch</code> ，在我们的例子中，Flex 项目显式设置了固定的高度。让我们删除它，看看结果如何。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.item {</span></span>
<span class="line"><span>    inline-size: 120px;</span></span>
<span class="line"><span>    block-size: initial;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt="img"></p><h2 id="沿主轴分配空间" tabindex="-1"><a class="header-anchor" href="#沿主轴分配空间"><span>沿主轴分配空间</span></a></h2><p>在上面这个初始化示例中，Flex 项目在主轴上排成一行，而且主轴方向有一定的剩余空间。这是因为，所有 Flex 项目的宽度总和小于 Flex 容器宽度，无法完全填满 Flex 容器。“Flex 项目会向主轴起点位置靠齐（即行上第一个 Flex 项目的起始位置和 Flex 容器主轴起点位置平齐），Flex 容器的剩余空间都位于结尾处（即行上最后 Flex 项目终点处与 Flex 容器主轴终点处之间的距离）”：</p><p><img src="'+d+`" alt="img"></p><p>也就是说，你可以改变 <code>justify-content</code> 的值，来改变 Flex 项目在 Flex 容器上的对齐方式，即 <strong>调整 Flex 容器剩余空间的位置</strong> 。比如，将 <code>justify-content</code> 的值设置为 <code>flex-end</code> 时，Flex 项目将在 Flex 容器主轴终点处对齐，Flex 容器的剩余空间将位于主轴的起始点。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    justify-content: flex-end;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="img"></p><p>你也可以将 <code>justify-content</code> 属性设置为 <code>center</code> ，将 Flex 容器主轴（同行）上的剩余空间均分在 Flex 容器的两侧：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+'" alt="img"></p><p>其实，当 <code>justify-content</code> 取值为 <code>flex-start</code> 、<code>flex-end</code> 和 <code>center</code> 时，相当于：</p><ul><li><code>flex-start</code> ：主轴起点对齐（<code>ltr</code> 模式是左对齐）；</li></ul><ul><li><code>flex-end</code> ：主轴终点对齐（<code>ltr</code> 模式是右对齐）；</li></ul><ul><li><code>center</code> ：主轴居中对齐。</li></ul><p>因此，在 Flexbox 布局中，常常<strong>使用</strong> <strong><code>justify-content: center</code></strong> <strong>来实现水平居中的布局效果</strong> 。</p><p>你也可以将 <code>justify-content</code> 属性设置为 <code>space-around</code> 、<code>space-between</code> 或 <code>space-evenly</code> ，在 Flex 项目之间分配 Flex 容器的剩余空间。</p><ul><li><code>space-between</code> 会让行上第一个 Flex 项目的起始边缘与 Flex 容器主轴起点相吻合，行上最后一个 Flex 项目的结束边缘与 Flex 容器主轴终点相吻合，其它相邻 Flex 项目之间间距相等。当 Flex 容器中只有一个 Flex 项目时，其表现行为和 <code>flex-start</code> 等同。</li></ul><ul><li><code>space-around</code> 会让行上第一个 Flex 项目的起始边缘与 Flex 容器主轴起点间距，和行上最后一个 Flex 项目的结束边缘与 Flex 容器主轴终点间距相等，并且等于其他相邻两个 Flex 项目之间间距的二分之一。当 Flex 容器中只有一个 Flex 项目时，其表现行为和 <code>center</code> 等同。</li></ul><ul><li><code>space-evenly</code> 会让行上第一个 Flex 项目的起始边缘与 Flex 容器主轴起点间距，和最后一个 Flex 项目的结束边缘与 Flex 容器主轴终点间距相等，并且等于其他相邻两个 Flex 项目之间间距。当 Flex 容器中只有一个 Flex 项目时，其表现行为和 <code>center</code> 等同。</li></ul><p><img src="'+r+'" alt="img"></p><blockquote><p>注意，在 Flexbox 布局中，可以用于 <code>justify-content</code> 属性的值，除了上述提到的（<code>flex-start</code>、<code>flex-end</code> 、<code>center</code> 、<code>space-around</code> 、<code>space-between</code> 和 <code>space-evenly</code>）之外，还可以使用 <code>start</code> （等同于 <code>flex-start</code>）和 <code>end</code> （等同于 <code>flex-end</code>）。另外，CSS 的关键词 <code>inherit</code> 、<code>initial</code> 、<code>revert</code> 和 <code>unset</code> 也可以用于 <code>justify-content</code> 属性。</p></blockquote><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/486ae89b756d4f46a8c54f77b397b022~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/rNvMdEw" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/rNvMdEw</a></p></blockquote><p>如果 Flex 容器没有额外的剩余空间，或者说剩余空间为负值时， <code>justify-content</code> 属性的值表现形式和前面所述是有差异的：</p><ul><li><code>flex-start</code> 会让 Flex 项目在 Flex 容器主轴终点处溢出 ；</li></ul><ul><li><code>flex-end</code> 会让 Flex 项目在 Flex 容器主轴起点处溢出；</li></ul><ul><li><code>center</code> 会让 Flex 项目在 Flex 容器两端溢出；</li></ul><ul><li><code>space-between</code> 和 <code>flex-start</code> 相同；</li></ul><ul><li><code>space-around</code> 和 <code>center</code> 相同；</li></ul><ul><li><code>space-evenly</code> 和 <code>center</code> 相同；</li></ul><ul><li><code>start</code> 和 <code>flex-start</code> 相同；</li></ul><ul><li><code>end</code> 和 <code>flex-end</code> 相同。</li></ul><p><img src="'+u+`" alt="img"></p><p>上面我们所探讨的是 <code>flex-direction</code> 为 <code>row</code> （默认值）时，使用 <code>justify-content</code> 可以用来控制 Flex 项目在行上的对齐方式和 Flex 容器剩余空间的分配。接下来，我们来看<code>justify-content</code> 将作用于列的效果（即 <code>flex-direction</code> 属性值为 <code>column</code> 时，<code>justify-content</code> 的表现）。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    flex-direction: column;</span></span>
<span class="line"><span>    justify-content: var(--justify-content, flex-start);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd25c4b9f55d487eb4a46503a5dfb24c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/mdLrLQe" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/mdLrLQe</a></p></blockquote><p>事实上，不管 <code>flex-direction</code> 属性的值是什么，<code>justify-content</code> 属性<strong>只作用于 Flex 容器主轴上，它会让 Flex 项目在主轴上进行排列或分配主轴方向的 Flex 容器剩余空间</strong> 。不过，当 <code>flex-direction</code> 属性取值为 <code>column</code> 或 <code>column-reverse</code> 时，需要在代码中使用 <code>height</code> 或 <code>block-size</code> 显式指定容器的高度，只有这样才能让 Flex 容器有一定的剩余空间。否则，Flex 容器不会有任何剩余空间可供分配。这主要是因为，CSS 在计算块容器（Flex容器）高度（或块方向尺寸）时，默认以其内容或所有后代元素高度来计算。</p><h2 id="沿侧轴分配空间" tabindex="-1"><a class="header-anchor" href="#沿侧轴分配空间"><span>沿侧轴分配空间</span></a></h2><blockquote><p><strong>沿侧轴分配空间，又可以看作是 Flexbox 布局中多行（或多列）的对齐方式</strong> ！</p></blockquote><p>在 Flexbox 布局中，当 Flex 容器没有足够多的空间来容纳 Flex 项目时，且 Flex 容器上显式设置了 <code>flex-wrap</code> 属性的值为 <code>wrap</code> （或 <code>wrap-reverse</code>），Flex 项目会换行排列：</p><p><img src="`+g+'" alt="img"></p><p>由于 <code>align-items</code> 属性的初始值为 <code>stretch</code> ，每个 Flex 项目在侧轴方向被拉伸，Flex 项目高度变高填充了 Flex 容器侧轴空间（即 Flex 容器的 <code>height</code> 或 <code>block-size</code>），并且每行的 Flex 项目高度是相等的。</p><p>我们从前面的课程中可以得知，当 Flex 项目换行排列时，每一行都有其自己独立的主轴方向（也称为 “弹性行”）:</p><p><img src="'+h+`" alt="img"></p><p>只不过，要是在 Flex 项目上显式设置了其高度（<code>height</code> 或 <code>block-size</code>）时，即使 <code>align-items</code> 的值为 <code>stretch</code> ，也不会拉伸 Flex 项目。这个时候弹性行（相邻两行）之间就会有额外的空间出来：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    flex-wrap: wrap;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>.item {</span></span>
<span class="line"><span>    inline-size: 88px;</span></span>
<span class="line"><span>    block-size: 88px;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+'" alt="img"></p><p>这个时候，如果你想分配行与行之间的间距（Flex 容器侧轴方向的剩余空间），那就需要使用 <code>align-content</code> 属性。</p><p>Flexbox 布局中的 <code>align-content</code> 属性值和 <code>justify-content</code> 属性值相比多出了一个 <code>stretch</code> 值。这些值的表现行为和 <code>justify-content</code> 属性值相同，不同的是 <strong><code>align-content</code></strong> <strong>用来分配 Flex 容器侧轴方向的剩余空间。</strong></p><p><img src="'+m+'" alt="img"></p><blockquote><p>注意，<code>align-content</code> 属性可接受的值有 <code>flex-start</code> 、<code>flex-end</code> 、<code>center</code> 、<code>space-around</code> 、<code>space-between</code> 、<code>space-evenly</code> 、<code>start</code> 、<code>end</code> 和 <code>strecth</code> 。</p></blockquote><p>如果 Flex 项目未显式设置 <code>height</code> 或 <code>block-size</code> 时，改变 <code>align-content</code> 属性值时，Flex 项目的高度将会作出相应改变，即它的高度将会是 Flex 项目内容的最大高度：</p><p><img src="'+k+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/RwyoVWW" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/RwyoVWW</a></p></blockquote><p>从上面的效果来看，你可以把 <code>align-content</code> 状态下侧轴中的整行（弹性行），当作是 <code>justify-content</code> 状态下单个 Flex 项目。</p><p><code>align-content</code> 属性同样会受 <code>flex-direction</code> 属性值的影响：</p><p><img src="'+b+'" alt="img"></p><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/WNJReYz" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/WNJReYz</a></p></blockquote><p>上面示例展示的都是 Flex 容器在侧轴方向有剩余空间的效果。当 Flex 容器中，所有行的尺寸之和大于 Flex 容器侧轴尺寸（即 <strong>Flex 容器侧轴方向没有剩余空间</strong> ）时，<code>align-content</code> 属性值表现行为：</p><ul><li><code>flex-start</code> 会让 Flex 容器的行在侧轴结束点溢出；</li></ul><ul><li><code>flex-end</code> 会让 Flex 容器的行在侧轴起点溢出；</li></ul><ul><li><code>center</code> 会让 Flex 容器行在侧轴两端溢出；</li></ul><ul><li><code>stretch</code> 表现行为类似于 <code>flex-start</code>；</li></ul><ul><li><code>space-around</code> 表现行为类似于 <code>center</code>；</li></ul><ul><li><code>space-between</code> 表现行为类似于 <code>flex-start</code>；</li></ul><ul><li><code>space-evenly</code> 表现行为类似于 <code>center</code>。</li></ul><p><img src="'+x+`" alt="img"></p><p>在构建 Web 布局时，可以<strong>使用<code>align-content</code>实现多行垂直居中的布局</strong> 。</p><blockquote><p>需要注意的是，当 Flex 容器中只有一行 Flex 项目，那么 <code>align-content</code> 属性取值为 <code>sapce-around</code> 和 <code>space-evenly</code> 的效果等同于 <code>center</code>；<code>align-content</code> 属性取值为 <code>space-between</code> 的效果等同于 <code>flex-start</code> 和 <code>start</code> 。</p></blockquote><p>在编码的时候，如果要同时设置 <code>justify-content</code> 和 <code>align-content</code> 两个属性的话，那么你可以使用它们的简写属性 <code>place-content</code> 。比如：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-content: center;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>/* 等同于 */</span></span>
<span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    place-content: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>place-content</code> 属性可以接受一个值，也可以接受两个值：</p><ul><li>如果只显式给 <code>place-content</code> 属性设置了一个值，则表示 <code>justify-content</code> 和 <code>align-content</code> 使用的是同一个值；</li></ul><ul><li>如果给 <code>place-content</code> 属性设置了两个值，则第一个值将作用于 <code>align-content</code> ，第二个值将作用于 <code>justify-content</code>。</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    place-content: center;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    /* 等同于 */</span></span>
<span class="line"><span>    align-content: center;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    place-content: center space-around;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    /* 等同于 */</span></span>
<span class="line"><span>    align-content: center;</span></span>
<span class="line"><span>    justify-content: space-around;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个小技巧，在 Flexbox 布局中，你可以使用 <code>place-content: center</code> 构建一个<strong>水平垂直居中</strong> 的布局效果：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/* 水平垂直居中 */</span></span>
<span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    flex-wrap: wrap;</span></span>
<span class="line"><span>    place-content: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+f+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/abGpzjG" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/abGpzjG</a></p></blockquote><p>大家需要知道的是，<strong><code>align-content</code></strong> <strong>只有当</strong> <strong><code>flex-wrap</code></strong> <strong>属性的值为非</strong> <strong><code>nowrap</code></strong> <strong>（即</strong> <strong><code>wrap</code></strong> <strong>或</strong> <strong><code>wrap-reverse</code></strong> <strong>）时才能生效</strong> 。</p><p><img src="'+y+`" alt="img"></p><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/RwyKPLr" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/RwyKPLr</a></p></blockquote><p>到这里，我们已经知道了：</p><ul><li>在 Flex 容器上使用 <code>justify-content</code>，可以控制 Flex 项目在 Flex 容器的主轴方向的对齐方式，以及 Flex 容器主轴方向剩余空间的分配；</li></ul><ul><li>在 Flex 容器上使用 <code>align-content</code> 可以控制 Flex 行（即 <code>flex-wrap</code> 属性为非 <code>nowrap</code> 时 Flex 项目所在行）在 Flex 容器的侧轴方向的对齐方式，以及 Flex 容器侧轴方向剩余空间的分配。</li></ul><blockquote><p><strong>最后再次提醒，<code>align-content</code>属性只有在</strong> <strong><code>flex-wrap</code></strong> <strong>取值为</strong> <strong><code>wrap</code></strong> <strong>或</strong> <strong><code>wrap-reverse</code></strong> <strong>时才有效</strong> ！</p></blockquote><h2 id="沿侧轴对齐-flex-项目" tabindex="-1"><a class="header-anchor" href="#沿侧轴对齐-flex-项目"><span>沿侧轴对齐 Flex 项目</span></a></h2><blockquote><p><strong>沿侧轴对齐 Flex 项目，指的是 Flex 容器中单行（或单例）以及单个 Flex 项目的对齐方式</strong> ！</p></blockquote><p>构建 Web 布局时，总有不需要断行（只是单行）的状态，即 <code>flex-wrap</code> 属性的值为 <code>nowrap</code> 。此时，要控制 Flex 项目在 Flex 容器侧轴上的对齐方式，就不能使用 <code>align-content</code> 属性了，但你可以使用 <code>align-items</code> 或 <code>align-self</code> 来控制整行 Flex 项目，或单个 Flex 项目在侧轴上的对齐方式：</p><ul><li><code>align-items</code> 用于 Flex 容器上，控制 Flex 行（所有 Flex 项目所在行）在侧轴上对齐方式；</li></ul><ul><li><code>align-self</code> 用于 Flex 项目上，控制单个 Flex 项目在侧轴上对齐方式。</li></ul><p>你可以使用 <code>flex-start</code> 、<code>center</code> 、<code>flex-end</code> 、<code>stretch</code> 、<code>baseline</code> 、<code>start</code> 和 <code>end</code> 中的任一值在侧轴方向对齐 Flex 项目：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+F+'" alt="img"></p><p><code>align-items</code> 属性和 <code>justify-content</code> 一样，也会受 <code>flex-direction</code> 属性值的影响：</p><p><img src="'+w+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/jOxyWyb" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/jOxyWyb</a></p></blockquote><p>在 Flexbox 布局中，当 Flex 容器中只有一个 Flex 行（比如说，所有 Flex 项目都在同一行），那么这个 Flex 行的高度与 Flex 容器是等高的。</p><p>在 Flex 容器上使用 <code>align-items</code> 时，就相同于在整个 Flex 容器的侧轴上对齐 Flex 项目。这和前面课程所介绍的内容并不相矛盾，在介绍 <code>align-content</code> 属性时，我们有介绍过，即，<strong>Flex 容器中的每一行都有自己的主轴方向和侧轴方向</strong> ，而 <code>align-items</code> 属性的值，是用来控制 Flex 项目沿着侧轴方向对齐。言外之意，Flex 容器有多行时，<code>align-items</code> 属性可以用于 Flex 项目沿着侧轴方向对齐：</p><p><img src="'+_+'" alt="img"></p><p>默认情况下，Flex 项目在 Flex 容器中断行排列时，每一行的高度是均等的，比如上图中均分了 Flex 容器的高度。这个高度也是每个 Flex 行的初始高度。此时，使用 <code>align-items</code> 属性时，Flex 项目就会沿着所在行的 <strong>侧轴</strong> 方向排列。</p><p><img src="'+q+'" alt="img"></p><p>使用 <code>flex-direction</code> 改变主轴和侧轴方向时，它们的表现形式是相同的，只不过当 <code>flex-direction</code> 属性的值是 <code>column</code> （或 <code>column-reverse</code>）时，<code>align-items</code> 属性取值为 <code>baseline</code> 时产生的结果与 <code>flex-start</code> 或 <code>start</code> 相同。</p><p><img src="'+A+`" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/eYrgxJy" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/eYrgxJy</a></p></blockquote><p>从示例的结果我们还可以发现，<strong>当 Flex 容器有多行出现时，使用</strong> <strong><code>align-items: center</code></strong> <strong>无法让它们在 Flex 容器中垂直居中（只能在所在 Flex 行中垂直居中）</strong> 。</p><p>现在我们知道了，使用 Flexbox 布局的时候，在 Flex 容器的侧轴方向，我们可以使用 <code>align-content</code> 和 <code>align-items</code> 来控制 Flex 项目的对齐方式和分配 Flex 容器侧轴的剩余空间。</p><p>这两个属性在一些特定条件之下表现出来的结果是相似的。比如，当 Flex 容器中仅有一行（即 Flex 容器有足够多的空间容纳所有 Flex 项目），且显式将 <code>flex-wrap</code> 属性值设置为 <code>wrap</code> 或 <code>wrap-reverse</code> 时，<code>align-content</code> 属性取值 <code>flex-start</code> 、<code>center</code> 、<code>stretch</code>、<code>flex-end</code> 、<code>start</code> 和 <code>end</code> 表现的结果将和 <code>align-items</code> 属性取值 <code>flex-start</code> 、<code>center</code> 、<code>stretch</code>、<code>flex-end</code> 、<code>start</code> 和 <code>end</code> 相同。</p><p>当然，<code>align-content</code> 和 <code>align-items</code> 也有着本质性的差异：</p><ul><li><code>align-content</code> 属性必须要在 <code>flex-wrap</code> 属性值为 <code>wrap</code> 或 <code>wrap-reverse</code> 条件下才能正常工作；但 <code>align-items</code> 属性则不需要；</li></ul><ul><li><code>align-content</code> 属性除了可以让 Flex 项目所在行在 Flex 容器侧轴对齐之外，还可以用来分配 Flex 容器侧轴方向的剩余空间，比如 <code>space-around</code> 、<code>space-between</code> 和 <code>space-evenly</code> 等属性；但 <code>align-items</code> 属性则只用于控制 Flex 项目在 Flex 行侧轴方向的对齐方式。</li></ul><p>这里有一个小技巧，如果在 Flex 容器上，同时设置了<code>align-content</code>属性的值是非<code>stretch</code> 值和<code>align-items</code>属性任一值，那么客户端会以<code>align-content</code>属性为主，而<code>align-items</code>属性则会被客户端忽略；如果在 Flex 容器上，同时设置了<code>align-content</code>属性值是<code>stretch</code>(即默认值)和显式设置了<code>align-items</code>属性任一值，那么客户端会以<code>align-items</code>属性为主，而<code>align-content</code>则会被客户端忽略。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/* 以 align-items 属性的值为主 */</span></span>
<span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    flex-wrap: wrap;</span></span>
<span class="line"><span>    align-content: stretch; /* 被客户端忽略 */</span></span>
<span class="line"><span>    align-items: center; </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>/* 以 align-content 属性的值为主 */</span></span>
<span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    flex-wrap: wrap;</span></span>
<span class="line"><span>    align-content: center;</span></span>
<span class="line"><span>    align-items: flex-end; /* 被客户端忽略 */</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>/* align-content 属性被视为无效 */</span></span>
<span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    align-content: center; /* 需要配合 flex-wrap 属性值为 wrap 或 wrap-reverse 一起使用*/</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+B+`" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/eYrgabP" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/eYrgabP</a></p></blockquote><p>你可能已经发现了，不管是使用 <code>align-content</code> 还是 <code>align-items</code> 属性，都是用来控制整行的 Flex 项目（即 一组或多组 Flex 项目），却无法控制单个 Flex 项目。庆幸的是，在 Flexbox 布局中，可以在 Flex 项目上显式设置 <code>align-self</code> 属性，来控制单个 Flex 项目沿着 Flex 容器侧轴来对齐项目。</p><p><code>align-self</code> 和用于 Flex 容器上的 <code>align-items</code> 属性非常相似，它在 <code>align-items</code> 属性值的基础上多了一个 <code>auto</code> 值，并且其默认值是 <code>auto</code> （<code>align-items</code> 属性的默认值是 <code>stretch</code> ）。</p><p>我们可以像下面这样使用 <code>align-self</code> ：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>.items:nth-child(3n) {</span></span>
<span class="line"><span>    align-self: var(--align-self, auto);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+C+`" alt="img"></p><blockquote><p>注意，只有 <code>align-content</code> 和 <code>align-items</code> 两个属性取默认值 <code>stretch</code> 时，<code>align-self</code> 属性的 <code>auto</code> 和 <code>stretch</code> 效果才是等同的。</p></blockquote><p>虽然 <code>align-self</code> 可以使单个 Flex 项目沿着 Flex 行的侧轴方向对齐，但当它碰到运用于 Flex 容器的 <code>align-content</code> 和 <code>align-items</code> 还是有一定差异的。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    flex-wrap: var(--flex-wrap, nowrap);</span></span>
<span class="line"><span>    align-content: var(--align-content, stretch);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>.item {</span></span>
<span class="line"><span>    align-self: var(--algin-self, auto)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+j+`" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/xxjgoWZ" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/xxjgoWZ</a></p></blockquote><p>从上面的效果中不难发现，<strong>当</strong> <strong><code>align-self</code></strong> <strong>碰上了</strong> <strong><code>align-content</code></strong> <strong>属性时，只有</strong> <strong><code>align-content</code></strong> <strong>属性值为</strong> <strong><code>stretch</code></strong> <strong>时，<code>align-self</code>属性的值才有效。</strong></p><p>而 <code>align-items</code> 和 <code>align-self</code> 同时使用则不会像 <code>align-content</code> 属性这样，<strong>只不过 Flex 项目的</strong> <strong><code>align-self</code></strong> <strong>属性取值为</strong> <strong><code>auto</code></strong> <strong>时，不会覆盖 Flex 容器上</strong> <strong><code>align-items</code></strong> <strong>属性值的效果</strong> ：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.flex-container {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    align-items: var(--align-items, stretch);</span></span>
<span class="line"><span>} </span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>.item {</span></span>
<span class="line"><span>    align-self: var(--align-self, stretch);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+z+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/xxjgoWZ" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/xxjgoWZ</a></p></blockquote><p>我们在实际生产时，在 Flexbox 中，不管是使用 <code>align-content</code> 、 <code>align-items</code> 还是 <code>justify-content</code> 时，总是不太好实现我们所期望的布局效果，但在 Flex 项目中使用 <code>align-self</code> 会让你变得容易很多，比如下面这个示例中的按钮居右显示：</p><p><img src="'+D+`" alt="img"></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;card&quot;&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;card__thumb&quot;&gt;</span></span>
<span class="line"><span>    &lt;svg t=&quot;1662879804494&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1445 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;5503&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;</span></span>
<span class="line"><span>      &lt;path d=&quot;M0.005421 131.312941V584.282353a30.117647 30.117647 0 0 0 49.995294 22.889412l271.661177-236.724706a60.235294 60.235294 0 0 1 77.101176 0l259.011765 207.209412 142.757647-142.757647a60.235294 60.235294 0 0 1 80.112941-4.216471l301.176471 240.941176a60.235294 60.235294 0 1 1-75.294118 93.967059l-259.011765-207.209412-142.757647 142.757648a60.235294 60.235294 0 0 1-80.112941 4.21647L361.417186 493.929412l-301.176471 262.625882a180.705882 180.705882 0 0 0-60.235294 136.131765A131.312941 131.312941 0 0 0 131.318362 1024h1183.021177A131.312941 131.312941 0 0 0 1445.65248 892.687059V131.312941A131.312941 131.312941 0 0 0 1314.339539 0H131.318362A131.312941 131.312941 0 0 0 0.005421 131.312941zM1114.358362 421.647059a144.564706 144.564706 0 1 1 144.564706-144.564706A144.564706 144.564706 0 0 1 1114.358362 421.647059z&quot; fill=&quot;currentColor&quot; p-id=&quot;5504&quot;&gt;&lt;/path&gt;</span></span>
<span class="line"><span>    &lt;/svg&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;card__content&quot;&gt;</span></span>
<span class="line"><span>    &lt;h3 class=&quot;title&quot;&gt;</span></span>
<span class="line"><span>      &lt;small&gt;UX Design&lt;/small&gt;</span></span>
<span class="line"><span>      Make it easier to search and filter</span></span>
<span class="line"><span>    &lt;/h3&gt;</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>    &lt;button&gt;Read More&lt;/button&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">card</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  gap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">rem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">​</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">card__thumb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  min-inline-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  aspect-ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> / </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  justify-content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  align-items</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">​</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">card__content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  min-width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  flex-direction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> column</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  justify-content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> space-between</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  gap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.25</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">em</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">​</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h3</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> small</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> block</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">​</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">card__content</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  align-items</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  justify-content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> inline-flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  align-self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flex-end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/PoepOwp" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/PoepOwp</a></p></blockquote><h2 id="flex-项目上的-margin" tabindex="-1"><a class="header-anchor" href="#flex-项目上的-margin"><span>Flex 项目上的 <code>margin</code></span></a></h2><blockquote><p><strong>在 Flexbox 布局中，Flex 容器上可以使用</strong> <strong><code>align-items</code></strong> <strong>和</strong> <strong><code>align-self</code></strong> <strong>在侧轴方向对齐和分配侧轴空间，但在主轴上不存在</strong> <strong><code>justify-items</code></strong> <strong>和</strong> <strong><code>justify-self</code></strong> <strong>。</strong></p></blockquote><p>Flex 容器不存在 <code>justify-items</code> 和 <code>justify-self</code> ，主要是因为 Flex 项目在 Flex 容器的主轴上被当作一个组。因此，没有将单个 Flex 项目从该组中分离出来的概念，但它们却存在于 CSS Grid 布局中。<code>justify-self</code> 和 <code>justify-items</code> 属性作用于内联轴（Inline Axis），以沿该轴将网格区域内的项目对齐。由于 Flexbox 布局是将 Flex 项目视为一个组，因此，这些属性未在 Flexbox 上下文（FFC）中实现。</p><blockquote><p>注意，有关于 <code>justify-self</code> 和 <code>justify-items</code> ，将会在后面的 CSS Grid 布局的课程中介绍。</p></blockquote><p>虽然在 Flexbox 布局中，无法在 Flex 容器的主轴上，直接使用 <code>justify-self</code> 和 <code>justify-items</code> 将 Flex 项目从一个组中分离出来，但我们可以在 Flex 项目中使用 <code>margin: auto</code> 将 Flex 项目在 Flex 容器的主轴上进行分组。</p><p><img src="`+S+'" alt="img"></p><p>我们来看一个使用 <code>margin:auto</code> 对 Flex 项目分组的示例。</p><p><img src="'+E+`" alt="img"></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;header&gt;</span></span>
<span class="line"><span>    &lt;Logo /&gt;</span></span>
<span class="line"><span>    &lt;Nav /&gt;</span></span>
<span class="line"><span>    &lt;UserProfile /&gt;</span></span>
<span class="line"><span>&lt;/header&gt;</span></span>
<span class="line"><span>header {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    gap: var(--gap, 1rem);</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中的 <code>&lt;Logo /&gt;</code> 、<code>&lt;Nav /&gt;</code> 和 <code>&lt;UserProfile /&gt;</code> 三个组件都是 Flex 项目：</p><p><img src="`+W+'" alt="img"></p><p>就这个示例而言，在 Flex 容器上 <code>&lt;header&gt;</code> 使用 <code>justify-content: space-between</code> 无法达到预期的效果：</p><p><img src="'+M+`" alt="img"></p><p>最为简单的方法，就是在 <code>&lt;UserProfile /&gt;</code> 使用 <code>margin-left: auto</code> 或 <code>margin-inline-start: auto</code> ：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.header {</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  gap: var(--gap, 1rem);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>.section {</span></span>
<span class="line"><span>  margin-inline-start: auto;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/qBYrVva" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/qBYrVva</a></p></blockquote><p>需要注意的是，<strong>在 Flex 项目上使用</strong> <strong><code>margin: auto</code>，会致使 Flex 项目上的</strong> <strong><code>align-self</code></strong> <strong>属性失效</strong>。</p><h2 id="flexbox-中的溢出对齐" tabindex="-1"><a class="header-anchor" href="#flexbox-中的溢出对齐"><span>Flexbox 中的溢出对齐</span></a></h2><p>使用 CSS 来构建 Web 布局时，有一个最大的目标，即 <strong>保持 Web 页面的内容和元素对访问者（用户）是可见的</strong> 。容器会根据其内容自动扩展到右侧或底部。当内容溢出时，容器变为可滚动的，用户可以滚动来访问“不可见的内容”。除非你在容器上使用 <code>overflow:hidden</code>，禁止容器因内容溢出出现滚动条的行为。</p><p>这是 CSS 最常见的一种设计，但在 Flexbox 布局中，却无法保证这一点。比如下面这个案例：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;container&quot;&gt;</span></span>
<span class="line"><span>  &lt;span&gt;CSS&lt;/span&gt;</span></span>
<span class="line"><span>  &lt;span&gt;is&lt;/span&gt;</span></span>
<span class="line"><span>  &lt;span&gt;awesome!&lt;/span&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>.container {</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  flex-direction: column;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>align-items</code> 将所有 Flex 项目（即 <code>span</code> 元素）沿着侧轴水平居中对齐。当 Flex 容器 <code>.container</code> 有足够空间时一切都完美，但如果容器没有足够多的空间来容纳 Flex 项目的内容时，就会出现“数据丢失”的情况：</p><p><img src="`+L+`" alt="img"></p><p>由于 Flex 项目始终在 Flex 容器水平居中，Flex 项目宽度大于 Flex 容器宽度时，Flex 项目就会在左右两边溢出。问题是 <strong>左侧的溢出区域超出了 Flex 容器视口的起始边缘，你不能滚动到该区域</strong> 。在这种情况下，就需要使用到 <strong><a href="https://drafts.csswg.org/css-align-3/#overflow-values" target="_blank" rel="noopener noreferrer">CSS Box Alignment Module Level 3</a></strong> （仍处于草案状态）定义 <strong>安全对齐</strong> 。</p><blockquote><p>“安全”对齐会在溢出情况下更改对齐模式，以避免数据丢失。</p></blockquote><p>就是给对齐属性新增了 <code>safe</code> 和 <code>unsafe</code> 两个关键词：</p><ul><li><code>safe</code>关键字会将因为对齐方式导致溢出时，将设置的对齐模式切换到 <code>start</code> 对齐模式下，目的是避免“数据丢失”，其中部分项目超出对齐容器的边界并且无法滚动到。</li></ul><ul><li><code>unsafe</code>，即使会导致此类数据丢失，也会遵守对齐方式。</li></ul><p>在上面的示例中，如果我们设置了 <code>align-items: safe center</code> （注意，<code>safe</code> 的 <code>center</code> 之间有一个空格），那么最终 Flex 项目对齐方式会切换到 <code>start</code> (或 <code>flex-start</code>) 模式，不会强制 Flex 项目居中对齐。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.container {</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  flex-direction: column;</span></span>
<span class="line"><span>  align-items: safe center;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+P+'" alt="img"></p><p>如果你确实想要对齐（即使它会导致溢出），那么你可以指定 <code>align-items</code> 属性的值为 <code>unsafe center</code> 。然后，你已请求浏览器执行你选择的对齐方式，无论内容随后发生什么。</p><p>溢出对齐对于防止数据丢失是非常有益的，可惜的是，直到写本课程时，仅有 Firefox 浏览器支持该特性。不过，可以使用 <code>margin: auto</code> 来达到相似的效果。</p><p><img src="'+Y+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/KKRWZMO" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/KKRWZMO</a></p></blockquote><h2 id="书写模式对-flexbox-对齐方式的影响" tabindex="-1"><a class="header-anchor" href="#书写模式对-flexbox-对齐方式的影响"><span>书写模式对 Flexbox 对齐方式的影响</span></a></h2><p>通过前面内容的学习，我想大家对 Flex 项目中的对齐属性有了一定的了解：</p><ul><li>可用于 Flex 容器的属性有 <code>justify-content</code> 、<code>align-content</code> 和 <code>align-items</code>；</li></ul><ul><li>可用于 Flex 项目的属性有 <code>align-self</code> 和 <code>margin: auto</code>；</li></ul><ul><li>Flexbox 布局中的溢出对齐 <code>safe</code> 和 <code>unsafe</code> ；</li></ul><ul><li>Flexbox 布局中没有 <code>justify-items</code> 和 <code>justify-self</code> 属性。</li></ul><p>在 Flexbox 布局中，这些属性都会受到 <code>flex-direction</code> 属性的影响，其中<code>justify-</code>属性始终用于在主轴上对齐，<code>align-</code>属性始终用于在侧轴上对齐。</p><p>但在 CSS 中，CSS 的书写模式 <code>writing-mode</code> 或阅读模式 <code>direction</code> （HTML 的 <code>dir</code>）也会影响 Web 布局，即 <strong>Web 排版的方向</strong> 。同样的，CSS 的 <code>writing-mode</code> 、<code>dirction</code> 和 HTML 的 <code>dir</code> 对 Flexbox 布局中对齐属性也会产生不同的结果。</p><p><img src="'+N+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/BaxWYLN" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/BaxWYLN</a></p></blockquote><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>在社区中也有很多小游戏，帮助我们用趣味性来理解这些属性在 Flexbox 布局中的使用。这里也简单构建一个小 <a href="https://codepen.io/airen/full/NWMpyYd" target="_blank" rel="noopener noreferrer">Demo</a>，希望能更好地帮助大家理解上面的相关属性：</p><p><img src="'+R+'" alt="img"></p><blockquote><p>Demo 地址： <a href="https://codepen.io/airen/full/NWMpyYd" target="_blank" rel="noopener noreferrer">https://codepen.io/airen/full/NWMpyYd</a></p></blockquote>',216)]))}const V=s(G,[["render",K],["__file","index.html.vue"]]),I=JSON.parse(`{"path":"/ModernWebLayout/6lnzv06u/","title":"04 Flexbox 布局中的对齐方式","lang":"zh-CN","frontmatter":{"title":"04 Flexbox 布局中的对齐方式","author":"Your name","createTime":"2024/07/29 21:23:47","permalink":"/ModernWebLayout/6lnzv06u/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"沿主轴分配空间","slug":"沿主轴分配空间","link":"#沿主轴分配空间","children":[]},{"level":2,"title":"沿侧轴分配空间","slug":"沿侧轴分配空间","link":"#沿侧轴分配空间","children":[]},{"level":2,"title":"沿侧轴对齐 Flex 项目","slug":"沿侧轴对齐-flex-项目","link":"#沿侧轴对齐-flex-项目","children":[]},{"level":2,"title":"Flex 项目上的 margin","slug":"flex-项目上的-margin","link":"#flex-项目上的-margin","children":[]},{"level":2,"title":"Flexbox 中的溢出对齐","slug":"flexbox-中的溢出对齐","link":"#flexbox-中的溢出对齐","children":[]},{"level":2,"title":"书写模式对 Flexbox 对齐方式的影响","slug":"书写模式对-flexbox-对齐方式的影响","link":"#书写模式对-flexbox-对齐方式的影响","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"readingTime":{"minutes":22.69,"words":6807},"git":{"createdTime":1722259884000,"updatedTime":1728783281000,"contributors":[{"name":"xxdl","email":"xxdl@xxdl.top","commits":3},{"name":"DengChang","email":"85365","commits":1}]},"filePathRelative":"notes/ModernWebLayout/04 Flexbox 布局中的对齐方式.md"}`);export{V as comp,I as data};
