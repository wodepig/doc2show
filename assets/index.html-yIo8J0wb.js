import{_ as o,c as n,a as r,o as a}from"./app-D6s_7T7O.js";const t="/doc2show/img/20/1.png",s="/doc2show/img/20/2.png",i="/doc2show/img/20/3.png",p="/doc2show/img/20/4.png",c="/doc2show/img/20/5.png",l="/doc2show/img/20/6.png",d={};function m(h,e){return a(),n("div",null,e[0]||(e[0]=[r('<p>大家好，我是村长！</p><p>本节课主要关注服务端开发相关知识，这主要是为接下来的项目篇做准备。</p><p>Nuxt 是全栈框架，给我们准备了丰富的服务端开发特性，旨在让大家能够通过一套方案就能完成全栈开发任务。但是有不少小伙伴是纯前端出身，对服务端一些知识有欠缺，例如数据库、接口设计开发等不是很熟悉，所以，我们本节课计划完成如下学习任务：</p><ul><li>掌握 MySQL 数据库开发和设计基础；</li><li>掌握基于 APIFox 的接口设计流程和方法；</li><li>掌握 Node.js ORM 方案 Prisma。</li></ul><p>下面，我们先从数据库环境准备开始，将会包括如下内容：</p><ul><li><p>数据库分类和选择；</p></li><li><p>安装数据库和管理工具。</p></li></ul><h2 id="数据库分类和选择" tabindex="-1"><a class="header-anchor" href="#数据库分类和选择"><span>数据库分类和选择</span></a></h2><p>在当今的互联网中，最常见的数据库模型主要是两种，即 <strong>关系型数据库</strong> 和 <strong>非关系型数据库：</strong></p><ul><li><p>关系型数据库模型是把复杂的数据结构归结为简单的二元关系（即二维表格形式）。在关系型数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联的表格分类、合并、连接或选取等运算来实现数据库的管理。</p></li><li><p>NoSQL，泛指非关系型的数据库。随着互联网 Web2.0 网站的兴起，传统的关系数据库在应付 Web2.0 网站，特别是超大规模和高并发的 SNS 类型的 Web2.0 纯动态网站已经显得力不从心，暴露了很多难以克服的问题。</p></li></ul><p>而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库在特定的场景下可以发挥出难以想象的高效率和高性能，它是作为对传统关系型数据库的一个有效的补充。</p><p>这两类数据库的代表就是 <strong>MySQL</strong> 和 <strong>MongoDB</strong> ，那么如何做选择？</p><p>作为文档数据库，由于 MongoDB 并不限制用户存储数据的体量和类型，因此适合大数据的应用环境。这对基于云的服务特别有利。</p><p>而得益于 MongoDB 的水平可扩展能力，以及与云服务的敏捷性结合，它不但能够减少开发者的工作量，简化业务与项目的扩展流程，还能够提供高可用性和数据的快速恢复。</p><p>不过，MongoDB 在数据可靠性、一致性以及安全性等方面，不如 MySQL。此外，当应用程序需要提供多行事务(比如会计和银行系统)时，以 MySQL 为首的关系型数据库提供了高事务处理率。与 MySQL 专注于提供事务的 ACID 和安全性不同的是，MongoDB 更专注于提供高插入率。</p><p>因此，我强烈建议大家将 MySQL 用于具有固定数据模式，且不打算在数据的多样性方面进行扩展的项目。因为在确保数据完整性和可靠性的同时，MySQL 不但方便维护，而且成本较低。</p><p>相反，MongoDB 是那些正在成长，但数据架构并不固定的业务或项目的最合适选择。因为它允许开发者在无需任何结构的情况下，自由地更新、检索和存储文档，因此它通常适用于内容管理、物联网处理，以及实时分析等项目。</p><h2 id="安装数据库和管理工具" tabindex="-1"><a class="header-anchor" href="#安装数据库和管理工具"><span>安装数据库和管理工具</span></a></h2><p>利用 docker 安装数据库和管理工具是最简单快捷的方式，而且还可以以同样的方式在服务器上安装。因此我这里用 docker 方式搭建 MySQL 开发环境。</p><h3 id="安装-docker" tabindex="-1"><a class="header-anchor" href="#安装-docker"><span>安装 docker</span></a></h3><p>首先去<a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">官网</a>下载并安装 Docker Desktop，下载适合自己的版本，比如我下载的是 Mac 版：</p><p><img src="'+t+'" alt=""></p><p>启动 Docker Desktop：</p><p><img src="'+s+`" alt=""></p><h3 id="通过-docker-compose-安装-mysql-和-adminer" tabindex="-1"><a class="header-anchor" href="#通过-docker-compose-安装-mysql-和-adminer"><span>通过 docker-compose 安装 MySQL 和 Adminer</span></a></h3><p>Docker 安装好之后，就可以找到合适的镜像安装所需软件，我们这里准备安装 MySQL 数据库和管理端 Adminer。</p><p>首先，我们在项目根目录下创建一个 <code>docker-compose.yml</code> 文件，并粘贴如下内容：</p><pre><code>version: &#39;3.7&#39;
services:
  mysql_db_container:
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword  # root账号密码
    ports:
      - 3306:3306
    volumes:
      - mysql_db_data_container:/var/lib/mysql
  adminer_container:
    image: adminer:latest
    environment:
      ADMINER_DEFAULT_SERVER: mysql_db_container
    ports:
      - 8080:8080

volumes:
  mysql_db_data_container:
</code></pre><p>然后使用 docker-compose 命令拉取镜像，在命令行输入如下命令：</p><pre><code>docker compose up -d
</code></pre><p>执行结束，效果如下：</p><p><img src="`+i+'" alt=""></p><p>现在再看一下 Docker Desktop 的运行状态，MySQL 和 Adminer 顺利启动了：</p><p><img src="'+p+'" alt=""></p><h2 id="使用-adminer" tabindex="-1"><a class="header-anchor" href="#使用-adminer"><span>使用 Adminer</span></a></h2><p>下面就可以通过 Adminer 管理数据库了，浏览器中输入：<a href="http://localhost:8080%EF%BC%8C" target="_blank" rel="noopener noreferrer">http://localhost:8080，</a></p><p>这里用户名输入：root，密码输入：rootpassword（如果修改了，就输入修改过的密码），效果如下：</p><p><img src="'+c+'" alt=""></p><blockquote><p>注意如果端口不合适，可以在 docker-compose.yml 中修改 <code>ports</code></p></blockquote><p>点击登录，应该能看到下面的管理界面：</p><p><img src="'+l+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>好了，关于数据库开发环境的准备工作就给大家讲到这里。有了 docker 的加持，这些工具的安装配置跟之前比起来变得非常简单。如果大家有更偏爱的管理工具，例如 Navicat 等等，可以不用拉取 Adminer 镜像，单独安装客户端。</p><h2 id="下次预告" tabindex="-1"><a class="header-anchor" href="#下次预告"><span>下次预告</span></a></h2><p>下一节，我们将使用 Adminer 进行用户管理、数据库创建、数据库表设计等管理任务，帮助大家掌握数据库相关的基础知识，为后续项目开发做准备。</p>',44)]))}const k=o(d,[["render",m],["__file","index.html.vue"]]),u=JSON.parse(`{"path":"/nuxt3/7ft07i4w/","title":"20-基于 Docker 搭建 MySQL 数据库开发环境","lang":"zh-CN","frontmatter":{"title":"20-基于 Docker 搭建 MySQL 数据库开发环境","author":"Your name","createTime":"2024/07/29 16:11:51","permalink":"/nuxt3/7ft07i4w/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"数据库分类和选择","slug":"数据库分类和选择","link":"#数据库分类和选择","children":[]},{"level":2,"title":"安装数据库和管理工具","slug":"安装数据库和管理工具","link":"#安装数据库和管理工具","children":[{"level":3,"title":"安装 docker","slug":"安装-docker","link":"#安装-docker","children":[]},{"level":3,"title":"通过 docker-compose 安装 MySQL 和 Adminer","slug":"通过-docker-compose-安装-mysql-和-adminer","link":"#通过-docker-compose-安装-mysql-和-adminer","children":[]}]},{"level":2,"title":"使用 Adminer","slug":"使用-adminer","link":"#使用-adminer","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"下次预告","slug":"下次预告","link":"#下次预告","children":[]}],"readingTime":{"minutes":4.86,"words":1458},"git":{"createdTime":1722241276000,"updatedTime":1728783252000,"contributors":[{"name":"DengChang","email":"85365","commits":1},{"name":"xxdl","email":"xxdl@xxdl.top","commits":1}]},"filePathRelative":"notes/nuxt3/20-基于 Docker 搭建 MySQL 数据库开发环境.md"}`);export{k as comp,u as data};
