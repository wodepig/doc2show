import{_ as l,c as p,a as s,o as t}from"./app-D6s_7T7O.js";const o="/doc2show/img/13/1.png",i="/doc2show/img/13/2.png",r="/doc2show/img/13/3.png",n="/doc2show/img/13/4.png",c="/doc2show/img/13/5.png",a="/doc2show/img/13/6.png",d="/doc2show/img/13/7.png",h="/doc2show/img/13/8.png",m="/doc2show/img/13/9.png",g="/doc2show/img/13/10.png",u="/doc2show/img/13/11.png",x="/doc2show/img/13/12.png",_="/doc2show/img/13/13.png",v="/doc2show/img/13/14.png",f="/doc2show/img/13/15.png",S="/doc2show/img/13/16.png",b="/doc2show/img/13/17.png",k="/doc2show/img/13/18.png",E="/doc2show/img/13/19.png",w="/doc2show/img/13/20.png",N={};function j(C,e){return t(),p("div",null,e[0]||(e[0]=[s(`<p>大家好，我是村长！截至目前为止，Nuxt 开发相关的内容告一段落。</p><p>本讲我们将探讨 Nuxt 项目的打包与部署，涉及内容如下：</p><ul><li><p>多种打包方式；</p></li><li><p>部署为 Node.js 服务；</p></li><li><p>部署为静态服务；</p></li><li><p>云服务。</p></li></ul><h2 id="多种打包方式" tabindex="-1"><a class="header-anchor" href="#多种打包方式"><span>多种打包方式</span></a></h2><p>与传统服务端渲染只能发布于 Node.js 服务不同，Nuxt 应用不仅可以发布在 Node.js 服务上，还能预渲染内容做为静态服务，Nuxt3 甚至可以发布在 serverless 或 cdn 等云服务环境。</p><p>打包 Nuxt 项目可以用<code>nuxt build</code>或<code>nuxt generate</code>，根据配置不同，可分为以下几种方式：</p><ul><li><p>SSR：<code>nuxt build</code>。代码会被打包到<code>.output</code>目录，打包产物分为 public 和 server 两部分。入口为 index.mjs，可以使用 node 或 pm2 等进程管理工具启动服务，也可以配合<code>nuxt preview</code>启动预览服务。</p></li><li><p>SPA：<code>ssr:false</code> + <code>nuxt generate</code>。产物只有 .output/public 中的静态文件，发布 .output/public 即可。但是 SPA 需要在运行时访问接口获取数据，因此仍然需要提供接口服务才能正常显示页面。</p></li><li><p>SSG：<code>nuxt generate</code>。产物只有 .output/public 中的静态文件，发布 .output/public 即可。这种方式会在创建时生成页面内容，因此只需要提供静态服务即可预览。</p></li><li><p>其他服务：<code>presets</code>，可用于其他非 node 运行时打包，例如 deno，serverless，edge worker 等。产物根据预设不同会有不同，部署需要按照对应的平台进行操作。</p></li></ul><h3 id="打包-ssr" tabindex="-1"><a class="header-anchor" href="#打包-ssr"><span>打包 SSR</span></a></h3><p>默认情况下，直接执行<code>nuxt build</code>：</p><pre><code>yarn build
</code></pre><p>打包结果如下：server 内会有内容，index.mjs 为入口文件。</p><p><img src="`+o+`" alt=""></p><h3 id="打包-ssg" tabindex="-1"><a class="header-anchor" href="#打包-ssg"><span>打包 SSG</span></a></h3><p>默认情况下直接执行 <code>nuxt generate</code>：</p><pre><code>yarn generate
</code></pre><p>下图为 generate 结果：server是空的，只有 public 中的静态内容。</p><p><img src="`+i+`" alt=""></p><h3 id="打包-spa" tabindex="-1"><a class="header-anchor" href="#打包-spa"><span>打包 SPA</span></a></h3><p>配置 <code>ssr: false</code>，然后执行 <code>nuxt generate</code>：</p><pre><code>export default defineNuxtConfig({
  ssr: false,
})



yarn generate
</code></pre><p>下图为 generate 结果：server是空的，跟 SSG 略有不同，动态的 detail 没有了，会作为前端动态路由出现。</p><p><img src="`+r+'" alt=""></p><h3 id="使用-presets" tabindex="-1"><a class="header-anchor" href="#使用-presets"><span>使用 presets</span></a></h3><p>配置 <code>nitro.preset</code>选项即可。</p><p><img src="'+n+`" alt=""></p><p>例如，我们准备发布到 vercel，可以设置 <code>nitro.preset</code> 为 <code>vercel</code> 或 <code>vercel edge</code>。</p><h2 id="部署为-node-js-服务" tabindex="-1"><a class="header-anchor" href="#部署为-node-js-服务"><span>部署为 Node.js 服务</span></a></h2><p>针对前面介绍的 SSR 方式打包，访问页面需要服务器实时渲染，因此需要启动 node server。</p><h3 id="启动-node-js-服务" tabindex="-1"><a class="header-anchor" href="#启动-node-js-服务"><span>启动 node.js 服务</span></a></h3><p>执行如下命令启动服务：</p><pre><code>node .output/server/index.mjs
</code></pre><p>服务启动效果如下：</p><p><img src="`+c+'" alt=""></p><p>访问 <a href="http://localhost:3000/%EF%BC%8C%E6%95%88%E6%9E%9C%E5%A6%82%E5%88%9D%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:3000/，效果如初：</a></p><p><img src="'+a+`" alt=""></p><p>这意味着我们只需要将 <code>.output</code> 中的内容上传至服务器并启动 node 服务即可。</p><h3 id="运行时配置" tabindex="-1"><a class="header-anchor" href="#运行时配置"><span>运行时配置</span></a></h3><p>服务器上可能有多个应用，因此需要配置端口号等。传递环境变量可以修改端口号等的默认配置，例如：</p><ul><li><p>PORT：端口号；</p></li><li><p>HOST：服务地址；</p></li><li><p>NITRO_SSL_CERT 和 NITRO_SSL_KEY：启用 HTTPS。</p></li></ul><p>下面我们修改端口号为 8080：</p><pre><code>PORT=8080 node .output/server/index.mjs
</code></pre><p>效果如下：</p><p><img src="`+d+`" alt=""></p><h3 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理"><span>进程管理</span></a></h3><p>服务器一般会有 pm2 之类的工具便于管理多个服务进程，可以配置 ecosystem.config.js：</p><pre><code>module.exports = {
  apps: [
    {
      name: &#39;czblog&#39;,
      port: &#39;8080&#39;,
      exec_mode: &#39;cluster&#39;,
      instances: &#39;max&#39;,
      script: &#39;./.output/server/index.mjs&#39;
    }
  ]
}
</code></pre><p>启动服务：</p><pre><code>pm2 start ecosystem.config.js
</code></pre><blockquote><p>安装 pm2：<code>npm i pm2 -g</code>。</p></blockquote><p>启动效果如下:</p><p><img src="`+h+`" alt=""></p><p>访问 <a href="http://localhost:8080%EF%BC%8C%E6%95%88%E6%9E%9C%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%E3%80%82" target="_blank" rel="noopener noreferrer">http://localhost:8080，效果是一致的。</a></p><h2 id="部署静态服务" tabindex="-1"><a class="header-anchor" href="#部署静态服务"><span>部署静态服务</span></a></h2><p>如果生成的是 SPA 或 SSG，则仅需上传 public 中的内容到服务器，并启动一个静态服务即可，例如 nginx。</p><p>作为演示，我们这里使用 serve：</p><pre><code>cd .output/public
# 需要先安装 serve 包
serve
</code></pre><p><img src="`+m+'" alt=""></p><p>访问 <a href="http://localhost:3000%EF%BC%8C%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:3000，效果如下：</a></p><p><img src="'+g+`" alt=""></p><h2 id="部署到云服务" tabindex="-1"><a class="header-anchor" href="#部署到云服务"><span>部署到云服务</span></a></h2><p>Nuxt 应用可以部署在 serverless 或 edge 环境，但是打包时需要 Nuxt 有对应的 present 支持，目前官方提供了 13 个云服务提供商的 presents：</p><ol><li>Azure；</li><li>Vercel；</li><li>Netlify；</li><li>StormKit；</li><li>Cloudflare；</li><li>AWS Lamda；</li><li>Firebase；</li><li>Cleavr；</li><li>DigitalOcean；</li><li>Edgio；</li><li>Heroku；</li><li>Layer0；</li><li>Render.com。</li></ol><p>列表中前五个是支持零配置的，比较推荐。很遗憾暂时没有国内的提供商，如果想要发布需要更多的配置。</p><h3 id="部署到-vercel" tabindex="-1"><a class="header-anchor" href="#部署到-vercel"><span>部署到 Vercel</span></a></h3><p>Vercel 是 next.js 东家，大名鼎鼎，对 Nuxt 应用发布支持也是最好的。</p><p>这里就以 Vercel 为例给大家演示 Nuxt 应用发布过程：</p><ol><li>修改预设为 <code>vercel</code>，nuxt.config.ts：</li></ol><pre><code>export default defineNuxtConfig({
  nitro: {
    preset: &#39;vercel&#39;
  }
})
</code></pre><ol start="2"><li>发布项目代码到 github / gitlab：</li></ol><p><img src="`+u+'" alt=""></p><ol start="3"><li>前往 <a href="https://vercel.com/new" target="_blank" rel="noopener noreferrer">vercel</a> 导入项目：</li></ol><p><img src="'+x+'" alt=""></p><ol start="4"><li>发布项目：配置会自动导入，点击 Deploy 发布。</li></ol><p><img src="'+_+'" alt=""></p><ol start="5"><li>部署成功：</li></ol><p><img src="'+v+'" alt=""></p><ol start="6"><li>预览项目：虽然部署成功，但是数据获取失败了，这是因为我们的代码需要访问文件系统，这是 Serverless Function 不支持的。</li></ol><p><img src="'+f+'" alt=""></p><p>因此，我们可以修改“创建命令”为<code>nuxt generate</code>，使我们应用成为全静态网站：</p><p><img src="'+S+'" alt=""></p><p>修改完成再次执行发布任务，你可以：</p><ul><li>修改代码并 push 到 github 触发；</li><li>在 Vercel 控制台 Deployments 发布记录中点击右侧三个点 - Redeploy。</li></ul><p><img src="'+b+'" alt=""></p><p>等待发布结束，观察是否已经变为静态输出，大家看下图中已经没有 Serverless Functions 了。</p><p><img src="'+k+'" alt=""></p><p>再看效果如下图：</p><p><img src="'+E+'" alt=""></p><p>似乎正常了，其实不然！点击下一页，发现又出状况了：</p><p><img src="'+w+'" alt=""></p><p>这是由于 SSG 采用爬虫方式抓取要生成的内容，页面中如果没有链接则无从获取，比如上面的“上一页”、“下一页”按钮，执行的是 JS 代码获取，因此这些页面既不会生成，点击也不能正常显示。这要求我们实现时必须明确地在页面中出现链接，我们可以尝试做如下修改方案：</p><ul><li>分页采用明确的页码链接列表；</li><li>把文章分成各种分类，增加一个页面显示分类文章列表；</li><li>……</li></ul><p>大家可以尝试一下~</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>总算告一段落了，可以看到比起 SPA 的部署，其他渲染模式部署真是复杂多了！但是这会让我们被迫学习更多服务端知识，思考服务器运行方式，还能实践很多部署运维操作，可谓收获多多！如果你一时记不住这些知识，可以在打包前想一下自己的需要，问自己几个问题：</p><ul><li><p>我这个网站纯静态行不行？可以了当然好，这是性能最优，部署最简单的方式。</p></li><li><p>如果不能纯静态，是否看重 SEO，可以打包为 SPA 吗？可以了也不错，性能很好，部署简单。</p></li><li><p>如果都不行，那就服务端渲染，此时还可以问自己将来准备部署到哪？如果自己有 ECS 之类的服务器，可以随便折腾，需要什么运行环境都可以安装，或者索性用 docker 做个镜像。</p></li><li><p>如果要部署为云函数那就麻烦了，目前 Nuxt 就提供了国外十几个供应商的 preset，国内的没有整合，可能不太能接受国外的，自己折腾又是个黑盒子，preset 开发暂时也没有文档。这种方式如果要考虑，就要选在国内有分店的，比如我知道 azure 就有。</p></li></ul><h2 id="下次预告" tabindex="-1"><a class="header-anchor" href="#下次预告"><span>下次预告</span></a></h2><p>关于发布就给大家讲到这里，一些发布的细节还未涉及，我们将在后续项目中详细演示。</p>',97)]))}const P=l(N,[["render",j],["__file","index.html.vue"]]),R=JSON.parse(`{"path":"/nuxt3/kxng3c2z/","title":"13-Nuxt 项目多种打包方式与部署详解","lang":"zh-CN","frontmatter":{"title":"13-Nuxt 项目多种打包方式与部署详解","author":"Your name","createTime":"2024/07/29 16:11:51","permalink":"/nuxt3/kxng3c2z/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"多种打包方式","slug":"多种打包方式","link":"#多种打包方式","children":[{"level":3,"title":"打包 SSR","slug":"打包-ssr","link":"#打包-ssr","children":[]},{"level":3,"title":"打包 SSG","slug":"打包-ssg","link":"#打包-ssg","children":[]},{"level":3,"title":"打包 SPA","slug":"打包-spa","link":"#打包-spa","children":[]},{"level":3,"title":"使用 presets","slug":"使用-presets","link":"#使用-presets","children":[]}]},{"level":2,"title":"部署为 Node.js 服务","slug":"部署为-node-js-服务","link":"#部署为-node-js-服务","children":[{"level":3,"title":"启动 node.js 服务","slug":"启动-node-js-服务","link":"#启动-node-js-服务","children":[]},{"level":3,"title":"运行时配置","slug":"运行时配置","link":"#运行时配置","children":[]},{"level":3,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[]}]},{"level":2,"title":"部署静态服务","slug":"部署静态服务","link":"#部署静态服务","children":[]},{"level":2,"title":"部署到云服务","slug":"部署到云服务","link":"#部署到云服务","children":[{"level":3,"title":"部署到 Vercel","slug":"部署到-vercel","link":"#部署到-vercel","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"下次预告","slug":"下次预告","link":"#下次预告","children":[]}],"readingTime":{"minutes":6.37,"words":1912},"git":{"createdTime":1722241276000,"updatedTime":1728783252000,"contributors":[{"name":"DengChang","email":"85365","commits":1},{"name":"xxdl","email":"xxdl@xxdl.top","commits":1}]},"filePathRelative":"notes/nuxt3/13-Nuxt 项目多种打包方式与部署详解.md"}`);export{P as comp,R as data};
